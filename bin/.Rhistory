spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e),
fixed = b+c+d+e~ 1|HERBICIDE,
random = c+d~ 1|CURVE,
data=spin2)
spinmod
spin2<-groupedData(SLOPE ~ DOSE|HERBICIDE/CURVE,
data=spinach)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e),
fixed = b+c+d+e~ 1|HERBICIDE,
random = c+d~ 1|CURVE,
data=spin2)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e),
fixed = b+c+d+e~ HERBICIDE,
random = c+d~ 1|CURVE,
data=spin2)
spin2<-groupedData(SLOPE ~ DOSE|CURVE,
data=spinach)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e),
fixed = b+c+d+e~ HERBICIDE,
random = c+d~ 1|CURVE,
data=spin2)
spinmod
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)HERBICIDE,
fixed = b+c+d+e~1,
random = c+d~ 1|CURVE,
data=spin2)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
fixed = b+c+d+e~1,
random = c+d~ 1|CURVE,
data=spin2)
spinmod
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
fixed = b+c+d+e~1,
random = c+d~ 1|CURVE,
start(-.748,-.0132,1.658,.481)
data=spin2)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
fixed = b+c+d+e~1,
random = c+d~ 1|CURVE,
start=c(-.748,-.0132,1.658,.481)
data=spin2)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
fixed = b+c+d+e~1,
random = c+d~ 1|CURVE,
start=c(-.748,-.0132,1.658,.481),
data=spin2)
spinmod<-nlme(SLOPE ~ NLS.LL4(DOSE,b,c,d,e),
fixed = b+c+d+e~1|as.factor(HERBICIDE),
random = c+d~ 1|CURVE,
data=spin2)
spinmod
spn1<-nlsList(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
data=spinach)
spn1
spin2<-groupedData(SLOPE ~ DOSE|HERBICIDE,
data=spinach)
spn1<-nlsList(SLOPE ~ NLS.LL4(DOSE,b,c,d,e)|HERBICIDE,
data=spinach)
spn1
xyplot(SLOPE ~ DOSE|HERBICIDE, data=spinach)
head(spinach)
spinDiuron<-spinach[spinach$HERBICIDE=="diuron",]
plot(SLOPE~DOSE, data=apinDiuron)
plot(SLOPE~DOSE, data=spinDiuron)
str(spinDiuron)
sum(spinDiuron$HERBICIDE=="bentazon")
installed.packages("readr")
help("installed.packages")
help("installed.packages") == T
installed.packages("nlme4")
library(nlme4)
installed.packages(nlme4)
BiocManager::version()
rm(list=ls())
### Actividad 4a) Z1,...,Zn~(iid)N()
n = 10
Xg= runif(,min = -5, max = 5); Yg = runif(n,min = -5, max = 5);
Xg= runif(n,min = -5, max = 5); Yg = runif(n,min = -5, max = 5);
as.list(Xg)
Z = cbind(Xg,Yg)
as.list(Z)
apply(Z, 2, as.list)
apply(Z, 1, as.list)
split(mat, rep(1:nrow(Z), each = ncol(Z)))
split(Z, rep(1:nrow(Z), each = ncol(Z)))
help(split)
rep(1:nrow(Z), each = ncol(Z))
split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Z[`1`]
Z$`1`
Z[1]
Z[2]
Z[1]<-rbind(Z[1],c(1,2))
Z[1]<-cbind(Z[1],c(1,2))
Z[[1]]
Z[1]
Z[[1]]<-rbind(Z[[1]],c(1,2))
Z[1]
Z <- cbind(Xg,Yg)
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
dim(Yg)
Yg
dim(Yg)
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1); Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- cbind(Xg,Yg)
Z
Z <- cbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Xg
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1); Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- cbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Xg
Yg
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- cbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Xg
Z <- cbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:ncol(Z), each = nrow(Z)))
Z
Z <- rbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:ncol(Z), each = nrow(Z)))
Z
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Xg
Yg
dim(Yg)
Xg
m=100
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
}
#
mu1 = 0; mu2 = 0; sigma12=1; sigma22=4; rho = 0.95
sigma1 = sqrt(sigma12); sigma2 = sqrt(sigma22)
m=100
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
}
dim(Xg)
m=99
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
}
dim(Xg)
rm(Xg)
rm(Yg)
#
mu1 = 0; mu2 = 0; sigma12=1; sigma22=4; rho = 0.95
sigma1 = sqrt(sigma12); sigma2 = sqrt(sigma22)
#
n <- 10
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- rbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
m=99
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
}
Z[[1]]
Z[[1]]<-rbind(Z[[1]],Xg[1,])
Z[[1]]
z
Z
Z
Z <-split(Z, rep(1:ncol(Z), each = ncol(Z)))
Z <-split(Z, rep(1:ncol(Z), each = nrow(Z)))
Z
Z <- rbind(c(Xg),c(Yg))
Z <-split(Z, rep(1:nrow(Z), each = ncol(Z)))
Z
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- rbind(c(Xg),c(Yg))
Z
rep(1:nrow(Z), each=ncol(Z))
rep(1:ncol(Z), each=nrow(Z))
rep(1:ncol(Z), each=10
)
rep(1:10, each=1)
rep(1:10, each=10)
as.list(as.data.frame(Z))
Xg[10];Yg[10]
Z
Z
Z <-as.list(as.data.frame(Z))
Z
Z[[1]]
Z[[10]]
Xg
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
for(j in 1:n){
Z[[i]]<-rbind(Z[[i]],
c(Xg[dim(Xg)[1],j],
Yg[dim(Yg)[1],j])
}
}
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
#
n <- 10
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- rbind(c(Xg),c(Yg))
Z <-as.list(as.data.frame(Z))
Z
m=99
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
for(j in 1:n){
Z[[j]]<-rbind(Z[[j]],
c(Xg[dim(Xg)[1],j],
Yg[dim(Yg)[1],j])
}
}
n <- 10
Xg<- matrix(runif(n,min = -5, max = 5), nrow=1);
Yg <- matrix(runif(n,min = -5, max = 5),nrow=1);
Z <- rbind(c(Xg),c(Yg))
Z <-as.list(as.data.frame(Z))
Z
m=99
for (i in 1:m) {
Xg = rbind(Xg,
rnorm(n, mu1+rho*sigma1/sigma2*(Yg[dim(Yg)[1],]-mu2)))
Yg = rbind(Yg,
rnorm(n, mu2+rho*sigma2/sigma1*(Xg[dim(Xg)[1],]-mu1)))
for(j in 1:n){
Z[[j]]<-rbind(Z[[j]],
c(Xg[dim(Xg)[1],j],
Yg[dim(Yg)[1],j]))
}
}
Z
Z[[1]]
Z[[1]][1,]
lines(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col="red")
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col="red")
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=1)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=2)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=3)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=5)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=1)
lines(Z[[2]][,1], Z[[2]][,2], type = "b", pch=16, col=2)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=1)
for(j in 2:n){
lines(Z[[j]][,1], Z[[j]][,2], type = "b", pch=16, col=j)
}
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=1, frame=F)
for(j in 2:n){
lines(Z[[j]][,1], Z[[j]][,2], type = "b", pch=16, col=j)
}
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(Z[[1]][,1]), lag.max=50, auto.layout = FALSE)
installed.packages(codas)
installed.packages(coda)
install.packages(coda)
install.packages("coda")
library(coda)
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(Z[[1]][,1]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
autocorr.plot(as.mcmc(Z[[1]][,2]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
par(mfrow=c(1,1))
win.graph(width = 200, height = 50)
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(Z[[1]][,1]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
autocorr.plot(as.mcmc(Z[[1]][,2]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
win.graph(width = 200, height = 60)
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(Z[[1]][,1]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
autocorr.plot(as.mcmc(Z[[1]][,2]), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
par(mfrow=c(1,1))
win.graph(width = 100,height = 90)
plot(Z[[1]][,1], Z[[1]][,2], type = "b", pch=16, col=1, frame=F)
for(j in 2:n){
lines(Z[[j]][,1], Z[[j]][,2], type = "b", pch=16, col=j)
}
#4c) Running means
win.graph()
plot(1:length(Z[[1]][,2])), cumsum(Z[[1]][,2]))/(1:length(Z[[1]][,2]))), type="l", ylim=c(-.1, 0.1))
abline(h=mean(Z[[1]][,2])), col="gray")
lines(1:length(Z[[1]][,1])), cumsum(Z[[1]][,1]))/(1:length(Z[[1]][,1]))), type="l", col="blue")
abline(h=mean(Z[[1]][,1])), col="gray")
Z[[1]][,1]
mean(Z[[1]][,1])
win.graph()
plot(1:length(Z[[1]][,2]), cumsum(Z[[1]][,2]))/(1:length(Z[[1]][,2]))), type="l", ylim=c(-.1, 0.1))
abline(h=mean(Z[[1]][,2]), col="gray")
lines(1:length(Z[[1]][,1]), cumsum(Z[[1]][,1]))/(1:length(Z[[1]][,1]))), type="l", col="blue")
abline(h=mean(Z[[1]][,1]), col="gray")
plot(1:length(Z[[1]][,2]), cumsum(Z[[1]][,2]))/(1:length(Z[[1]][,2]))), type="l", ylim=c(-.1, 0.1))
#4c) Running means
win.graph()
plot(1:length(Z[[1]][,2]), cumsum(Z[[1]][,2])/(1:length(Z[[1]][,2])),
type="l", ylim=c(-.1, 0.1))
abline(h=mean(Z[[1]][,2]), col="gray")
lines(1:length(Z[[1]][,1]), cumsum(Z[[1]][,1])/(1:length(Z[[1]][,1])),
type="l", col="blue")
abline(h=mean(Z[[1]][,1]), col="gray")
# 12/Mayo
# Muestreo Gibbs, normal bivariada
# densidad normal bivariada
mu1 = 0; mu2 = 0; sigma12=1; sigma22=4; rho = 0.95
sigma1 = sqrt(sigma12); sigma2 = sqrt(sigma22)
# muestra aleatoria
m=1000
x = rnorm(m, mu1, sqrt(sigma12))  # x = xa; y = ya
y = rnorm(m, mu2+rho*sigma2/sigma1*(x-mu1), sqrt((1-rho**2)*sigma22))
# win.graph()
xlim=c(mu1-3.5*sigma1, mu1+3.5*sigma1)
ylim=c(mu2-3.5*sigma2, mu2+3.5*sigma2)
plot(x, y, type="b", pch=16, col="blue", xlim=xlim, ylim=ylim)
abline(a=mu2-rho*sigma2/sigma1*mu1, b=rho*sigma2/sigma1)
# Contorno
dnorm2 = function(x,y) dnorm(y, mu2+rho*sigma2/sigma1*(x-mu1), sqrt((1-rho**2)*sigma22))*dnorm(x, mu1, sigma1)
x1=seq(mu1-3.5*sigma1, mu1+3.5*sigma1, length=101)
y1=seq(mu2-3.5*sigma2, mu2+3.5*sigma2, length=101)
z=outer(x1,y1, FUN="dnorm2")
dim(z)
z[51,51]
contour(x1, y1, z , nlevels=15, add=TRUE, col="gray")
abline(h=0, v=0, col="gray")
lines(x1, 5*dnorm(x1, mu1, sigma1)-6, type="l", col="gray")
abline(h=-6, col="darkgray")
lines(y=y1, x=4*dnorm(y1, mu2, sigma2)-3.5, type="l", col="gray")
abline(v=-3.5, col="darkgray")
# Actividad 3
#1) Graficar el contorno de la densidad bivariada
#2) estimar la recta del modelo
#3) obtenga la correlacion de X y Y
#4) implemente el muestreo gibbs
# Muestreo Gibbs
# valor inicial
xg = 0; yg = 0
for (i in 1:2000) {
xg = c(xg,
rnorm(1, mu1+rho*sigma1/sigma2*(yg[length(yg)]-mu2),
sqrt((1-rho**2)*sigma12)))
yg = c(yg,  rnorm(1, mu2+rho*sigma2/sigma1*(xg[length(xg)]-mu1),
sqrt((1-rho**2)*sigma22)))
}
nrow(cbind(xg, yg))
lines(xg, yg, type = "b", pch=16, col="red")
lines(x, y, type="b", pch=16, col="blue", xlim=xlim, ylim=ylim)
lines(xg[2000:3001], yg[2000:3001], type = "b", pch=16, col="green")
# actividad 4
#a) Imitir este script para el caso de iid N(mu, sigma2)
#plazo: 1ero Jun 22
#
# library(coda)
win.grap()
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(x), auto.layout = FALSE)
abline(h=0, col="gray")
autocorr.plot(as.mcmc(y), auto.layout = FALSE)
abline(h=0, col="gray")
win.graph()
par(mfrow=c(1,2))
autocorr.plot(as.mcmc(xg), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
autocorr.plot(as.mcmc(yg), lag.max=50, auto.layout = FALSE)
abline(h=0, col="gray")
#
mean(y); var(y)
mean(yg); var(yg)
mean(yg[1:1000]); var(yg[1:1000])
mean(yg); var(yg)
win.graph()
plot(1:length(yg), cumsum(yg)/(1:length(yg)), type="l", ylim=c(-.1, 0.1))
abline(h=mean(yg), col="gray")
lines(1:length(xg), cumsum(xg)/(1:length(xg)), type="l", col="blue")
abline(h=mean(xg), col="gray")
# actividad 4, parte 2
#b) Obtenga la grafica de autocorrelaciones de beta y sigma2
#c) Obtenga la grafica de "Running Means" de beta y sigma2
# (plaso: idem)
win.graph()
plot(1:length(yg), cumsum(yg)/(1:length(yg)), type="l", ylim=c(-.1, 0.1))
abline(h=mean(yg), col="gray")
lines(1:length(xg), cumsum(xg)/(1:length(xg)), type="l", col="blue")
abline(h=mean(xg), col="gray")
install.packages("languageserver")
class(~Tapo)
"~Tapo"
class("~Tapo")
as.formula("~Tapo")
class(as.formula("~Tapo"))
setwd("~/SERVICIO_SOCIAL/Scripts-RNA-Seq/bin")
counts<-readr::read_csv("gene_count2.csv")
counts<-readr::read_csv("gene_count2.csv",show_col_types = F)
counts
rm(list=ls())
countData<-readr::read_csv("gene_count2.csv",show_col_types = F)
DEMetaData<-readr::read_csv("example_ED.csv", show_col_types = F)
DEMetaData
library(edgeR)
library(dply)
library(dplyr)
countData <- DGEList(counts = countData[,-1], group = pull(DEMetaData,2),
genes = countData[,1])
countData
countData$samples
dim(countData$samples)
names(countData$samples)
countData$counts
countData$counts[1,]
cbind(t(countData$counts[1,]),DEMetaData)
t(countData$counts[1,])
t(t(countData$counts[1,]))
cbind(t(t(countData$counts[1,])),DEMetaData)
#fullSampleInfo<-
data.frame(countData$counts[1,], DEMetaData, check.names = F)
countData$counts[1,]
#fullSampleInfo<-
data.frame(countData$counts, DEMetaData, check.names = F)
#fullSampleInfo<-
data.frame(countData$samples, DEMetaData, check.names = F)
#fullSampleInfo<-
data.frame(DEMetaData, countData$samples[,-1], check.names = F)
#fullSampleInfo<-
data.frame(DEMetaData[,-1], countData$samples[,-1], check.names = F)
#fullSampleInfo<-
fullSampleInfo <- data.frame(DEMetaData[,-1], countData$samples[,-1], check.names = F)
names(fullSampleInfo)
names(fullSampleInfo)<-c("group",countData$samples[-1])
fullSampleInfo
#fullSampleInfo<-
fullSampleInfo <- data.frame(DEMetaData[,-1], countData$samples[,-1], check.names = F)
fullSampleInfo
names(fullSampleInfo)<-c("group",names(fullSampleInfo)[-1])
fullSampleInfo
#formulaED<-
names(DEMetaData)
#formulaED<-
names(DEMetaData)[-1]
#formulaED<-
paste(names(DEMetaData)[-1],sep="",collapse = "+")
"2"+"3"
#formulaED<-
paste("~",paste(names(DEMetaData)[-1],sep="",collapse = "+"),sep="")
countData$samples[1:dim(DEMetaData)[2]-1]
countData$samples
countData$samples<-fullSampleInfo
countData$samples
countData$samples[1:dim(DEMetaData)[2]-1]
names(countData$samples[1:dim(DEMetaData)[2]-1])
#formulaED<-
paste("~",paste(names(countData$samples[1:dim(DEMetaData)[2]-1]),sep="",collapse = "+"),sep="")
names(countData$samples[1:dim(DEMetaData)[2]-1])
#formulaED<-
paste("~",paste(names(countData$samples[1:dim(DEMetaData)[2]-1]),sep="",collapse = "+"),sep="")
countData$samples[1:dim(DEMetaData)[2]-1]
names(DEMetaData)
#names(DEMetaData)<-
c(names(DEMetaData)[1],names(countData$samples[1:dim(DEMetaData)[2]-1]))
#formulaED<-
paste("~",paste(names(countData$samples[1:dim(DEMetaData)[2]-1]),sep="",collapse = "+"),sep="")
#formulaED<-
formula<-paste("~",paste(names(countData$samples[1:dim(DEMetaData)[2]-1]),sep="",collapse = "+"),sep="")
names(DEMetaData)<-c(names(DEMetaData)[1],names(countData$samples[1:dim(DEMetaData)[2]-1]))
names(DEMetaData)
model.matrix(DEMetaData, formula)
formula
model.matrix(DEMetaData, as.formula(formula))
DEMetaData
EDMetaData <- DEMetaData %>% mutate(across(-1,as.factor))
EDMetaData
model.matrix(EDMetaData, as.formula(formula))
library(modelr)
model_matrix(EDMetaData, as.formula(formula))
model.matrix(EDMetaData, ~ group + Sexo)
model.matrix(~ group + Sexo,data = EDMetaData)
dM<-model.matrix(~ group + Sexo,data = EDMetaData)
desMat<-model.matrix(~ group + Sexo,data = EDMetaData)
desMat
